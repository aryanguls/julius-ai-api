{"python": "{\"python\":\"# Load the NBA Stats CSV file into a DataFrame\\nimport pandas as pd\\n\\n# Load the file\\nfile_path = 'NBA Stats 202425 All Metrics NBA Player Props Tool.csv'\\ndf = pd.read_csv(file_path)\\n\\n# Display the first few rows to confirm successful loading\\nprint(df.head())\"}{\"python\": {\"python\": \"# Calculate correlation matrix\\nnumeric_df = df.select_dtypes(include=['float64', 'int64'])\\ncorr_matrix = numeric_df.corr()\\n\\n# Get the highest correlation pair (excluding self-correlation)\\ncorr_pairs = []\\nfor i in range(len(corr_matrix.columns)):\\n    for j in range(i+1, len(corr_matrix.columns)):\\n        corr_pairs.append((corr_matrix.index[i], \\n                          corr_matrix.columns[j], \\n                          abs(corr_matrix.iloc[i,j])))\\n\\n# Sort by correlation value and get top pair\\ntop_pairs = sorted(corr_pairs, key=lambda x: x[2], reverse=True)\\nprint(\\\"Top correlated pair:\\\")\\nprint(f\\\"{top_pairs[0][0]} and {top_pairs[0][1]} with correlation of {top_pairs[0][2]:.3f}\\\")\\n\\n# Create bar plot of top 10 scorers\\nimport matplotlib.pyplot as plt\\nimport seaborn as sns\\n\\n# Sort by PPG and get top 10\\ntop_scorers = df.nlargest(10, 'PPG')[['NAME', 'PPG']]\\n\\nplt.figure(figsize=(12, 6))\\nsns.barplot(data=top_scorers, x='NAME', y='PPG')\\nplt.xticks(rotation=45, ha='right')\\nplt.title('Top 10 NBA Scorers by PPG')\\nplt.tight_layout()\\nplt.show()\"}{\"python\": \"# Let's handle the correlation calculation more carefully\\n# First, let's clean the data by removing any columns with all NaN values\\ndf_clean = df.dropna(axis=1, how='all')\\n\\n# Calculate correlation matrix again\\nnumeric_df = df_clean.select_dtypes(include=['float64', 'int64'])\\ncorr_matrix = numeric_df.corr()\\n\\n# Get the highest correlation pair (excluding self-correlation)\\ncorr_pairs = []\\nfor i in range(len(corr_matrix.columns)):\\n    for j in range(i+1, len(corr_matrix.columns)):\\n        if not pd.isna(corr_matrix.iloc[i,j]):  # Exclude NaN correlations\\n            corr_pairs.append((corr_matrix.index[i], \\n                             corr_matrix.columns[j], \\n                             abs(corr_matrix.iloc[i,j])))\\n\\n# Sort by correlation value and get top pair\\ntop_pairs = sorted(corr_pairs, key=lambda x: x[2], reverse=True)\\nprint(\\\"Top 2 correlated pairs:\\\")\\nprint(f\\\"1. {top_pairs[0][0]} and {top_pairs[0][1]} with correlation of {top_pairs[0][2]:.3f}\\\")\\nprint(f\\\"2. {top_pairs[1][0]} and {top_pairs[1][1]} with correlation of {top_pairs[1][2]:.3f}\\\")\"}"}